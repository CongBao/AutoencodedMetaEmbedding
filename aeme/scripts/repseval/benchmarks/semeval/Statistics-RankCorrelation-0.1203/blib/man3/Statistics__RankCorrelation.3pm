.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Statistics::RankCorrelation 3pm"
.TH Statistics::RankCorrelation 3pm "2010-08-17" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Statistics::RankCorrelation \- Compute the rank correlation between two vectors
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Statistics::RankCorrelation;
\&
\&  $x = [ 8, 7, 6, 5, 4, 3, 2, 1 ];
\&  $y = [ 2, 1, 5, 3, 4, 7, 8, 6 ];
\&
\&  $c = Statistics::RankCorrelation\->new( $x, $y, sorted => 1 );
\&
\&  $n = $c\->spearman;
\&  $t = $c\->kendall;
\&  $m = $c\->csim;
\&
\&  $s = $c\->size;
\&  $xd = $c\->x_data;
\&  $yd = $c\->y_data;
\&  $xr = $c\->x_rank;
\&  $yr = $c\->y_rank;
\&  $xt = $c\->x_ties;
\&  $yt = $c\->y_ties;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module computes rank correlation coefficient measures between two 
sample vectors.
.PP
Examples can be found in the distribution \f(CW\*(C`eg/\*(C'\fR directory and methods
test.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 3
\&  $c = Statistics::RankCorrelation\->new;
\&  $c = Statistics::RankCorrelation\->new( \e@u, \e@v );
\&  $c = Statistics::RankCorrelation\->new( \e@u, \e@v, sorted => 1 );
.Ve
.PP
This method constructs a new \f(CW\*(C`Statistics::RankCorrelation\*(C'\fR object.
.PP
If given two numeric vectors (as array references), the statistical 
ranks are computed.  If the vectors are of different size, the shorter
is padded with zeros.
.PP
If the \f(CW\*(C`sorted\*(C'\fR flag is set, both are sorted by the first (\fBx\fR)
vector.
.SS "x_data"
.IX Subsection "x_data"
.Vb 2
\&  $c\->x_data( $y );
\&  $x = $c\->x_data;
.Ve
.PP
Set or return the one dimensional array reference data.  This is the
\&\*(L"unit\*(R" array, used as a reference for size and iteration.
.SS "y_data"
.IX Subsection "y_data"
.Vb 2
\&  $c\->y_data( $y );
\&  $x = $c\->y_data;
.Ve
.PP
Set or return the one dimensional array reference data.  This vector
is dependent on the x vector.
.SS "size"
.IX Subsection "size"
.Vb 2
\&  $c\->size( $s );
\&  $s = $c\->size;
.Ve
.PP
Set or return the number of array elements.
.SS "x_rank"
.IX Subsection "x_rank"
.Vb 2
\&  $c\->x_rank( $r );
\&  $r = $c\->x_rank;
.Ve
.PP
Set or return the ranks as an array reference.
.SS "y_rank"
.IX Subsection "y_rank"
.Vb 2
\&  $c\->y_rank( $y );
\&  $y = $c\->y_rank;
.Ve
.PP
Set or return the ranks as an array reference.
.SS "x_ties"
.IX Subsection "x_ties"
.Vb 2
\&  $c\->x_ties( $t );
\&  $t = $c\->x_ties;
.Ve
.PP
Set or return the ties as a hash reference.
.SS "y_ties"
.IX Subsection "y_ties"
.Vb 2
\&  $c\->y_ties( $t );
\&  $t = $c\->y_ties;
.Ve
.PP
Set or return the ties as a hash reference.
.SS "spearman"
.IX Subsection "spearman"
.Vb 1
\&  $n = $c\->spearman;
\&
\&      6 * sum( (xi \- yi)^2 )
\&  1 \- \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&             n^3 \- n
.Ve
.PP
Return Spearman's rho.
.PP
Spearman's rho rank-order correlation is a nonparametric measure of 
association based on the rank of the data values and is a special 
case of the Pearson product-moment correlation.
.PP
Here \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR are the two rank vectors and \f(CW\*(C`i\*(C'\fR is an index 
from one to \fBn\fR number of samples.
.SS "kendall"
.IX Subsection "kendall"
.Vb 1
\&  $t = $c\->kendall;
\&
\&         c \- d
\&  t = \-\-\-\-\-\-\-\-\-\-\-\-\-
\&      n (n \- 1) / 2
.Ve
.PP
Return Kendall's tau.
.PP
Here, \fBc\fR and \fBd\fR, are the number of concordant and discordant
pairs and \fBn\fR is the number of samples.
.SS "csim"
.IX Subsection "csim"
.Vb 1
\&  $n = $c\->csim;
.Ve
.PP
Return the contour similarity index measure.  This is a single 
dimensional measure of the similarity between two vectors.
.PP
This returns a measure in the (inclusive) range \f(CW\*(C`[\-1..1]\*(C'\fR and is 
computed using matrices of binary data representing \*(L"higher or lower\*(R" 
values in the original vectors.
.PP
This measure has been studied in musical contour analysis.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "rank"
.IX Subsection "rank"
.Vb 5
\&  $v = [qw(1 3.2 2.1 3.2 3.2 4.3)];
\&  $ranks = rank($v);
\&  # [1, 4, 2, 4, 4, 6]
\&  my( $ranks, $ties ) = rank($v);
\&  # [1, 4, 2, 4, 4, 6], { 1=>[], 3.2=>[]}
.Ve
.PP
Return an list of an array reference of the ordinal ranks and a hash
reference of the tied data.
.PP
In the case of a tie in the data (identical values) the rank numbers
are averaged.  An example will elucidate:
.PP
.Vb 5
\&  sorted data:    [ 1.0, 2.1, 3.2, 3.2, 3.2, 4.3 ]
\&  ranks:          [ 1,   2,   3,   4,   5,   6   ]
\&  tied ranks:     3, 4, and 5
\&  tied average:   (3 + 4 + 5) / 3 == 4
\&  averaged ranks: [ 1,   2,   4,   4,   4,   6   ]
.Ve
.SS "pad_vectors"
.IX Subsection "pad_vectors"
.Vb 2
\&  ( $u, $v ) = pad_vectors( [ 1, 2, 3, 4 ], [ 9, 8 ] );
\&  # [1, 2, 3, 4], [9, 8, 0, 0]
.Ve
.PP
Append zeros to either input vector for all values in the other that 
do not have a corresponding value.  That is, \*(L"pad\*(R" the tail of the 
shorter vector with zero values.
.SS "co_sort"
.IX Subsection "co_sort"
.Vb 1
\&  ( $u, $v ) = co_sort( $u, $v );
.Ve
.PP
Sort the vectors as two dimensional data-point pairs with \fBu\fR values
sorted first.
.SS "correlation_matrix"
.IX Subsection "correlation_matrix"
.Vb 1
\&  $matrix = correlation_matrix( $u );
.Ve
.PP
Return the correlation matrix for a single vector.
.PP
This function builds a square, binary matrix that represents \*(L"higher 
or lower\*(R" value within the vector itself.
.SS "sign"
.IX Subsection "sign"
Return 0, 1 or \-1 given a number.
.SH "TO DO"
.IX Header "TO DO"
Handle any number of vectors instead of just two.
.PP
Implement other rank correlation measures that are out there...
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For the \f(CW\*(C`csim\*(C'\fR method:
.PP
<http://personal.systemsbiology.net/ilya/Publications/JNMRcontour.pdf>
.PP
For the \f(CW\*(C`spearman\*(C'\fR and \f(CW\*(C`kendall\*(C'\fR methods:
.PP
<http://mathworld.wolfram.com/SpearmanRankCorrelationCoefficient.html>
.PP
<http://en.wikipedia.org/wiki/Kendall's_tau>
.SH "THANK YOU"
.IX Header "THANK YOU"
For helping make this sturdier code:
.PP
Thomas Breslin <thomas@thep.lu.se>
.PP
Jerome <jerome.hert@free.fr>
.PP
Jon Schutz <Jon.Schutz@youramigo.com>
.PP
Andy Lee <yikes2000@yahoo.com>
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Gene Boggs <gene@cpan.org>
.PP
Copyright 2010, Gene Boggs, All Rights Reserved.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute or modify it under
the same terms as Perl itself.
