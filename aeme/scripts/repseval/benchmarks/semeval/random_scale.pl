#!/usr/bin/perl
#
#
#   random_scale.pl
#
#   - assign random scale ratings to a list of word pairs, as a baseline
#
#
#
#
#   Peter Turney
#   December 19, 2011
#
#
#
#
#
#   check command line arguments
#
if ($#ARGV != 1) {
  print "\n\nUsage:\n\n";
  print "random_scale.pl <input file of word pairs> <output file of rated pairs>\n\n";
  exit;
}
#
#   input file of word pairs
#
$pair_file = $ARGV[0];
#
#   output file of rated pairs
#
$out_file = $ARGV[1];
#
#   random number seed for repeatable results
#
srand(1234);
#
#
#
#
#
#
#
#
#   read the file of word pairs
#
print "reading the file of word pairs $pair_file ...\n";
#
@pairs     = ();
$num_pairs = 0;
#
open(INF, "< $pair_file");
#
while ($line = <INF>) {
  if ($line =~ /^\#/) { next; }         # skip comments
  if ($line =~ /(\S+)/) {
    $pair = $1;
    push(@pairs, $pair);
    $num_pairs++;
  }
}
#
close(INF);
#
print "... read $num_pairs word pairs ...\n";
print "... done.\n";
#
#
#
#
#
#
#
#   assign a random scale rating to each pair and write to file
#
print "writing random scale ratings to $out_file ...\n";
#
@scores = ();
#
foreach $pair (@pairs) {
  $score  = 100 * rand();
  $item   = sprintf("%5.1f %s", $score, $pair);
  push(@scores, $item);
}
#
#   sort
#
@sorted = sort {$b <=> $a} @scores;
#
#   output
#
open(OUTF, "> $out_file");
#
print OUTF "#\n";
print OUTF "#   Generated by:               random_scale.pl\n";
print OUTF "#   Pair File:                  $pair_file\n";
print OUTF "#   Scaled File:                $out_file\n";
print OUTF "#   Number of Unique Pairs:     $num_pairs\n";
print OUTF "#\n";
#
foreach $item (@sorted) {
  print OUTF "$item\n";
}
#
close(OUTF);
#
print "... done.\n";
#
#
#
#
#
#